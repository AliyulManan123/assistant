import { Message } from "whatsapp-web.js";
import { promiseTracker } from "../clients/prompt";
import { sydney } from "../clients/sydney";
import { config } from "../config";

async function handleIncomingMessageImpl(message: Message) {
  const chat = await message.getChat();
  const text = message.body;

  chat.sendSeen();
  const sydneyResponse = await promiseTracker.track(text, chat, askSydney(text));
  await message.reply(sydneyResponse.response);
  chat.clearState();
}

async function askSydney(prompt: string) {
  const response = await sydney.sendMessage(prompt, {
    toneStyle: config.toneStyle,
    systemMessage: undefined,
    jailbreakConversationId: undefined,
    parentMessageId: undefined,
    onProgress: (token: string) => {
      // for debug purposes only
      process.stdout.write(token);
    }
  });

  return response;
}

// generated by GPT-4, this ensures the typing indicator will last more than 25s
function typingIndicatorWrapper(fn: (message: Message) => Promise<void>) {
  return async (message: Message) => {
    const chat = await message.getChat();
    let interval: NodeJS.Timeout = setTimeout(() => {}, 0);

    const typingIndicator = () => {
      chat.sendStateTyping();
      interval = setTimeout(typingIndicator, 25000);
    };

    typingIndicator();

    try {
      const result = await fn(message);
      clearTimeout(interval);
      return result;
    } catch (error) {
      clearTimeout(interval);
      throw error;
    }
  };
}

export const handleIncomingMessage = typingIndicatorWrapper(handleIncomingMessageImpl);
