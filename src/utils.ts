import { z, ZodType } from "zod";
import { config } from "./config";

export function jsonSafeParse<T extends ZodType<any>>(
  str: string,
  schema: T,
  logError = false
): z.infer<T> | null {
  try {
    const parsedValue = schema.safeParse(JSON.parse(str));
    if (parsedValue.success) {
      // Parsing was successful
      return parsedValue.data;
    } else {
      // Parsing failed
      if (logError) console.error("Parsing failed:", parsedValue.error);
      return null; // Or handle the error in any other way
    }
  } catch (error) {
    if (logError) console.error("Parsing failed:", error);
    return null;
  }
}

// function generated by GPT-4
export function getAvailableTones() {
  const toneCount = config.VALID_TONES.length;
  let availableTonesString = "Available options for tones are ";

  config.VALID_TONES.forEach((tone, index) => {
    if (index === toneCount - 1) {
      // Add 'and' before the last element
      availableTonesString += " and ";
    } else if (index !== 0) {
      // Add comma before non-first elements
      availableTonesString += ", ";
    }
    availableTonesString += `${tone}`;
  });

  availableTonesString += ".";

  return availableTonesString;
}
